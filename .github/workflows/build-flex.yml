name: Build and Release Flex

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*' # Run when tag is pushed (for versioned releases)

jobs:
  build:
    name: Build Flex for ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: flex
            asset_name: flex-linux
          - os: windows-latest
            output_name: flex.exe
            asset_name: flex-windows
          - os: macos-latest
            output_name: flex
            asset_name: flex-macos
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.10'
        
    - name: Get version information
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
        else
          VERSION="dev-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi
      shell: bash
        
    - name: Run tests
      run: |
        cd src
        python -m unittest discover -s flex_tester
      shell: bash
        
    - name: Build executable with PyInstaller
      run: |
        cd src
        pyinstaller --onefile main.py -n flex
      shell: bash

    - name: Create macOS-README.txt (macOS only)
      if: runner.os == 'macOS'
      run: |
        echo "# Important instructions for macOS users" > macOS-README.txt
        echo "" >> macOS-README.txt
        echo "If you see a 'Flex.app is damaged' error, please run this command in Terminal:" >> macOS-README.txt
        echo "" >> macOS-README.txt
        echo "    xattr -cr /Applications/Flex.app" >> macOS-README.txt
        echo "" >> macOS-README.txt
        echo "Then try opening the app again." >> macOS-README.txt
      shell: bash

    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: |
          ${{ runner.os == 'Windows' && 'src/dist/flex.exe' || 'src/dist/flex' }}
          ${{ runner.os == 'macOS' && 'macOS-README.txt' }}
        if-no-files-found: error

  release:
    name: Create Release
    needs: build
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: startsWith(github.ref, 'refs/tags/v') || github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up version information
      id: version
      run: |
        if [[ $GITHUB_REF == refs/tags/v* ]]; then
          VERSION=${GITHUB_REF#refs/tags/v}
          IS_PRERELEASE=false
          RELEASE_NAME="Flex ${GITHUB_REF#refs/tags/v}"
          TAG_NAME=${GITHUB_REF#refs/tags/}
        else
          VERSION="dev-$(date +'%Y%m%d')-${GITHUB_SHA::7}"
          IS_PRERELEASE=true
          RELEASE_NAME="Flex Latest Build"
          TAG_NAME="latest"
        fi
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "IS_PRERELEASE=$IS_PRERELEASE" >> $GITHUB_ENV
        echo "RELEASE_NAME=$RELEASE_NAME" >> $GITHUB_ENV
        echo "TAG_NAME=$TAG_NAME" >> $GITHUB_ENV
        echo "version=$VERSION" >> $GITHUB_OUTPUT
      shell: bash
    
    - name: Download all artifacts
      uses: actions/download-artifact@v4
      with:
        path: artifacts
    
    - name: List downloaded artifacts
      run: |
        echo "=== Downloaded artifacts structure ==="
        find artifacts -type f | sort
      shell: bash
    
    - name: Prepare release assets
      run: |
        mkdir -p release_assets
        
        # Check if Windows build exists
        if [ -f "artifacts/flex-windows/flex.exe" ]; then
          cp artifacts/flex-windows/flex.exe release_assets/flex.exe
        else
          echo "Warning: Windows executable not found"
          ls -la artifacts/flex-windows/ || echo "Windows artifacts directory not found or empty"
        fi
        
        # Check if macOS build exists
        if [ -f "artifacts/flex-macos/flex" ]; then
          cp artifacts/flex-macos/flex release_assets/flex-macos
        else
          echo "Warning: macOS executable not found"
          ls -la artifacts/flex-macos/ || echo "macOS artifacts directory not found or empty"
        fi
        
        # Check if macOS README exists
        if [ -f "artifacts/flex-macos/macOS-README.txt" ]; then
          cp artifacts/flex-macos/macOS-README.txt release_assets/macOS-README.txt
        else
          echo "Warning: macOS README not found"
        fi
        
        # Check if Linux build exists
        if [ -f "artifacts/flex-linux/flex" ]; then
          cp artifacts/flex-linux/flex release_assets/flex-linux
        else
          echo "Warning: Linux executable not found"
          ls -la artifacts/flex-linux/ || echo "Linux artifacts directory not found or empty"
        fi
        
        echo "=== Files in release_assets ==="
        ls -la release_assets/
      shell: bash
    
    - name: Create Release
      id: create_release
      uses: softprops/action-gh-release@v1
      with:
        name: ${{ env.RELEASE_NAME }}
        tag_name: ${{ env.TAG_NAME }}
        draft: false
        prerelease: ${{ env.IS_PRERELEASE }}
        files: release_assets/*
        body: |
          # ${{ env.RELEASE_NAME }}
          
          This release includes the standalone executables for Flex:
          - `flex.exe` for Windows
          - `flex-macos` for macOS
          - `flex-linux` for Linux
          - `macOS-README.txt` with important instructions for macOS users