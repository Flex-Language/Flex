name: Build Flex Executables

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build Flex Executable (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        include:
          - os: ubuntu-latest
            output_name: flex-linux
            asset_name: flex-linux
          - os: windows-latest
            output_name: flex-windows
            asset_name: flex-windows.exe
          - os: macos-latest
            output_name: flex-macos
            asset_name: flex-macos

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install -r src/requirements.txt
      continue-on-error: true
      
    - name: Install dependencies (without requirements.txt)
      if: ${{ failure() }}
      run: |
        python -m pip install --upgrade pip
        pip install pyinstaller
        pip install ply==3.11
        
    - name: Build with PyInstaller for Linux/macOS
      if: matrix.os != 'windows-latest'
      run: |
        chmod +x src/flex.sh
        cd src
        pyinstaller --onefile --name=${{ matrix.output_name }} main.py
        
    - name: Build with PyInstaller for Windows
      if: matrix.os == 'windows-latest'
      run: |
        cd src
        pyinstaller --onefile --name=${{ matrix.output_name }} main.py
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: src/dist/${{ matrix.output_name }}*
        retention-days: 7
        
  web-build:
    name: Build Web Version
    runs-on: ubuntu-latest
    needs: build
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.10'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install pyodide-build
        pip install -r src/requirements.txt
        
    - name: Set up Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Web Dependencies
      run: |
        npm install -g pyodide
        
    - name: Build Web Version
      run: |
        # Create a web build script
        echo '
        import os
        import shutil
        
        # Create web directory
        if not os.path.exists("web"):
            os.makedirs("web")
        
        # Copy necessary files
        shutil.copytree("src", "web/src", dirs_exist_ok=True)
        
        # Create index.html
        with open("web/index.html", "w") as f:
            f.write("""
        <!DOCTYPE html>
        <html lang="en">
        <head>
            <meta charset="UTF-8">
            <meta name="viewport" content="width=device-width, initial-scale=1.0">
            <title>Flex Programming Language - Web Version</title>
            <script src="https://cdn.jsdelivr.net/pyodide/v0.23.4/full/pyodide.js"></script>
            <style>
                body {
                    font-family: Arial, sans-serif;
                    margin: 0;
                    padding: 20px;
                    line-height: 1.6;
                }
                .container {
                    max-width: 1000px;
                    margin: 0 auto;
                }
                textarea {
                    width: 100%;
                    height: 300px;
                    font-family: monospace;
                    padding: 10px;
                    box-sizing: border-box;
                }
                #output {
                    background-color: #f5f5f5;
                    border: 1px solid #ddd;
                    padding: 10px;
                    min-height: 100px;
                    white-space: pre-wrap;
                    font-family: monospace;
                }
                button {
                    background-color: #4CAF50;
                    color: white;
                    padding: 10px 15px;
                    border: none;
                    cursor: pointer;
                    margin-top: 10px;
                }
            </style>
        </head>
        <body>
            <div class="container">
                <h1>Flex Programming Language - Web Version</h1>
                <p>Write your Flex code below and click "Run" to execute it.</p>
                
                <textarea id="code">// Write your Flex code here</textarea>
                <button id="runBtn">Run</button>
                
                <h3>Output:</h3>
                <div id="output"></div>
            </div>
            
            <script>
                // Init Pyodide
                async function main() {
                    let pyodide = await loadPyodide();
                    
                    // Load the Flex interpreter
                    await pyodide.loadPackagesFromImports(\`
                        import sys
                        import io
                    \`);
                    
                    // Make the run button work
                    document.getElementById("runBtn").addEventListener("click", async function() {
                        const code = document.getElementById("code").value;
                        const outputElement = document.getElementById("output");
                        outputElement.textContent = "Running...";
                        
                        try {
                            // Redirect stdout
                            pyodide.runPython(\`
                                import sys
                                old_stdout = sys.stdout
                                sys.stdout = io.StringIO()
                            \`);
                            
                            // Create a temporary file with the code
                            pyodide.runPython(\`
                                with open("/tmp/code.flex", "w") as f:
                                    f.write(""" + code + """")
                            \`);
                            
                            // Run the Flex interpreter on the file
                            await pyodide.runPythonAsync(\`
                                import sys
                                sys.path.append("/src")
                                from src.flex_compiler.compiler import compile_and_run
                                try:
                                    compile_and_run("/tmp/code.flex", False, True)
                                except Exception as e:
                                    print(f"Error: {str(e)}")
                            \`);
                            
                            // Get the output
                            const output = pyodide.runPython("sys.stdout.getvalue()");
                            outputElement.textContent = output;
                            
                            // Reset stdout
                            pyodide.runPython("sys.stdout = old_stdout");
                        } catch (error) {
                            outputElement.textContent = "Error: " + error.message;
                        }
                    });
                }
                
                main();
            </script>
        </body>
        </html>
            """)
        
        print("Web build prepared successfully!")
        ' > build_web.py
        
        # Run the web build script
        python build_web.py
        
    - name: Package Web Build
      run: |
        cd web
        zip -r ../flex-web.zip .
        cd ..
        
    - name: Upload Web Artifact
      uses: actions/upload-artifact@v4
      with:
        name: flex-web
        path: flex-web.zip
        retention-days: 7
        
  release:
    name: Create Release
    needs: [build, web-build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
      
      - name: Display structure of downloaded files
        run: ls -R
        
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          draft: false
          prerelease: false
          files: |
            ./flex-linux/flex-linux
            ./flex-windows.exe/flex-windows.exe
            ./flex-macos/flex-macos
            ./flex-web/flex-web.zip
