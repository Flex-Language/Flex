name: Build Flex Executables

on:
  push:
    branches: [ main ]

jobs:
  build:
    name: Build Flex Executable (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    timeout-minutes: 30
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.10']
        include:
          - os: ubuntu-latest
            output_name: flex-linux
            asset_name: flex-linux
          - os: windows-latest
            output_name: flex
            asset_name: flex.exe
          - os: macos-latest
            output_name: flex-macos
            asset_name: flex-macos

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
        cache: 'pip'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install ply==3.11
        pip install pyinstaller
        pip install requests>=2.0.0
        pip install ipaddress
        pip install urllib3
        pip install chardet
        pip install certifi
        # Add error handling for dependency installation
        python -c "import ply, requests, urllib3, chardet, certifi; print('All dependencies installed successfully')"

        
    - name: Build with PyInstaller for Linux/macOS
      if: matrix.os != 'windows-latest'
      run: |
        cd src
        # Ensure data directories exist to avoid warnings
        mkdir -p flex_AI/data/Compiler_AI
        mkdir -p flex_AI/data/ammar_data
        mkdir -p hooks
        
        # Create sample files if they don't exist to ensure the directories are included
        if [ ! -f "flex_AI/data/Compiler_AI/data.txt" ]; then
          echo "# Flex AI compiler examples will be included in future releases" > flex_AI/data/Compiler_AI/data.txt
        fi
        if [ ! -f "flex_AI/data/ammar_data/total.txt" ]; then
          echo "# Flex AI usage examples will be included in future releases" > flex_AI/data/ammar_data/total.txt
        fi
        
        # Create PyInstaller hook files
        cat > hooks/hook-encodings.py << 'EOF'
        """
        PyInstaller hook for encodings module
        
        This hook ensures that the idna encoding is properly included in the build,
        which is required for proper handling of URLs and internationalized domain names.
        """
        
        # Explicitly include idna encoding to prevent the "unknown encoding: idna" error
        hiddenimports = ['encodings.idna', 'encodings.ascii', 'encodings.utf_8', 'encodings.latin_1', 'encodings.cp1252']
        EOF
        
        cat > hooks/hook-flex_AI.py << 'EOF'
        """
        PyInstaller hook for flex_AI module
        
        This hook ensures that the data directories for flex_AI are properly included in the build,
        and that all necessary dependencies are imported.
        """
        
        from PyInstaller.utils.hooks import collect_data_files
        
        # Include all data files from the flex_AI module
        datas = collect_data_files('flex_AI')
        
        # Ensure these modules are included
        hiddenimports = [
            'encodings.idna',
            'ipaddress',
            'requests',
            'json',
            'urllib3',
            'chardet',
            'certifi'
        ]
        EOF
        
        # Verify all required directories exist before building
        ls -la flex_compiler flex_interpreter flex_parser flex_tokenizer flex_AI
        
        pyinstaller --onefile --clean --name=${{ matrix.output_name }} \
          --add-data "flex_compiler:flex_compiler" \
          --add-data "flex_interpreter:flex_interpreter" \
          --add-data "flex_parser:flex_parser" \
          --add-data "flex_tokenizer:flex_tokenizer" \
          --add-data "flex_AI:flex_AI" \
          --additional-hooks-dir=hooks \
          --hidden-import="encodings.idna" \
          --hidden-import="ipaddress" \
          --hidden-import="urllib3" \
          --hidden-import="chardet" \
          --hidden-import="certifi" \
          --hidden-import="json" \
          --hidden-import="requests.packages.urllib3" \
          main.py
          
        # Verify the build was successful
        if [ ! -f "dist/${{ matrix.output_name }}" ]; then
          echo "Build failed - executable not found"
          exit 1
        fi
        
    - name: Build with PyInstaller for Windows
      if: matrix.os == 'windows-latest'
      shell: cmd
      run: |
        cd src
        
        REM Ensure data directories exist to avoid warnings
        mkdir flex_AI\data\Compiler_AI 2>nul
        mkdir flex_AI\data\ammar_data 2>nul
        mkdir hooks 2>nul
        
        REM Create sample files if they don't exist to ensure the directories are included
        if not exist "flex_AI\data\Compiler_AI\data.txt" (
          echo # Flex AI compiler examples will be included in future releases > flex_AI\data\Compiler_AI\data.txt
        )
        if not exist "flex_AI\data\ammar_data\total.txt" (
          echo # Flex AI usage examples will be included in future releases > flex_AI\data\ammar_data\total.txt
        )
        
        REM Create PyInstaller hook files - using single file redirects for Windows
        echo from PyInstaller.utils.hooks import collect_data_files > hooks\hook-flex_AI.py
        echo. >> hooks\hook-flex_AI.py
        echo # Include all data files from the flex_AI module >> hooks\hook-flex_AI.py
        echo datas = collect_data_files('flex_AI') >> hooks\hook-flex_AI.py
        echo. >> hooks\hook-flex_AI.py
        echo # Ensure these modules are included >> hooks\hook-flex_AI.py
        echo hiddenimports = [ >> hooks\hook-flex_AI.py
        echo     'encodings.idna', >> hooks\hook-flex_AI.py
        echo     'ipaddress', >> hooks\hook-flex_AI.py
        echo     'requests', >> hooks\hook-flex_AI.py
        echo     'json', >> hooks\hook-flex_AI.py
        echo     'urllib3', >> hooks\hook-flex_AI.py
        echo     'chardet', >> hooks\hook-flex_AI.py
        echo     'certifi' >> hooks\hook-flex_AI.py
        echo ] >> hooks\hook-flex_AI.py
        
        echo # PyInstaller hook for encodings > hooks\hook-encodings.py
        echo # This hook ensures that the idna encoding is properly included in the build >> hooks\hook-encodings.py
        echo. >> hooks\hook-encodings.py
        echo # Explicitly include idna encoding to prevent the "unknown encoding: idna" error >> hooks\hook-encodings.py
        echo hiddenimports = ['encodings.idna', 'encodings.ascii', 'encodings.utf_8', 'encodings.latin_1', 'encodings.cp1252'] >> hooks\hook-encodings.py
        
        REM Verify all required directories exist before building
        dir flex_compiler flex_interpreter flex_parser flex_tokenizer flex_AI
        
        pyinstaller --onefile --clean --name=${{ matrix.output_name }} ^
          --add-data "flex_compiler;flex_compiler" ^
          --add-data "flex_interpreter;flex_interpreter" ^
          --add-data "flex_parser;flex_parser" ^
          --add-data "flex_tokenizer;flex_tokenizer" ^
          --add-data "flex_AI;flex_AI" ^
          --additional-hooks-dir=hooks ^
          --hidden-import="encodings.idna" ^
          --hidden-import="ipaddress" ^
          --hidden-import="urllib3" ^
          --hidden-import="chardet" ^
          --hidden-import="certifi" ^
          --hidden-import="json" ^
          --hidden-import="requests.packages.urllib3" ^
          main.py
          
        REM Verify the build was successful
        if not exist "dist\${{ matrix.output_name }}.exe" (
          echo Build failed - executable not found
          exit /b 1
        )
          
    # Create Windows Installer
    - name: Create Windows Installer
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        # Install NSIS installer system
        choco install nsis -y
        
        # Create installer script with single $ for NSIS variables
        # PowerShell won't interpolate these since they're in a here-string
        $installerScript = @'
        !include "MUI2.nsh"
        
        Name "Flex Language Interpreter"
        OutFile "flex-installer.exe"
        Unicode True
        
        !define MUI_WELCOMEPAGE_TITLE "Flex Language Interpreter Setup"
        !define MUI_WELCOMEPAGE_TEXT "This will install the Flex Language Interpreter on your computer."
        
        !insertmacro MUI_PAGE_WELCOME
        !insertmacro MUI_PAGE_DIRECTORY
        !insertmacro MUI_PAGE_INSTFILES
        !insertmacro MUI_PAGE_FINISH
        !insertmacro MUI_UNPAGE_CONFIRM
        !insertmacro MUI_UNPAGE_INSTFILES
        
        !insertmacro MUI_LANGUAGE "English"
        
        InstallDir "$PROGRAMFILES\Flex"
        RequestExecutionLevel admin
        
        Section "Install"
          SetOutPath "$INSTDIR"
          File "src\dist\flex.exe"
          
          ; Create batch file to invoke the executable
          FileOpen $0 "$INSTDIR\flex.bat" w
          FileWrite $0 "@echo off$\r$\n"
          FileWrite $0 "$INSTDIR\flex.exe %*$\r$\n"
          FileClose $0
          
          ; Add to system PATH (simpler approach)
          ReadRegStr $1 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "PATH"
          StrCmp $1 "" AddToPath_NTContinue
          StrCpy $0 "$INSTDIR;$1"
          Goto AddToPath_NTAddToPath
        AddToPath_NTContinue:
          StrCpy $0 "$INSTDIR"
        AddToPath_NTAddToPath:
          WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "PATH" $0
          
          ; Create uninstaller
          WriteUninstaller "$INSTDIR\uninstall.exe"
          
          ; Create Start Menu shortcut
          CreateDirectory "$SMPROGRAMS\Flex"
          CreateShortcut "$SMPROGRAMS\Flex\Flex.lnk" "$INSTDIR\flex.exe"
          CreateShortcut "$SMPROGRAMS\Flex\Uninstall.lnk" "$INSTDIR\uninstall.exe"
          
          ; Create registry entries
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Flex" "DisplayName" "Flex Language Interpreter"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Flex" "UninstallString" "$INSTDIR\uninstall.exe"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Flex" "DisplayVersion" "1.0.0"
          WriteRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Flex" "Publisher" "Flex Team"
        SectionEnd
        
        Section "Uninstall"
          Delete "$INSTDIR\flex.exe"
          Delete "$INSTDIR\flex.bat"
          Delete "$INSTDIR\uninstall.exe"
          
          ; Remove Start Menu shortcuts
          Delete "$SMPROGRAMS\Flex\Flex.lnk"
          Delete "$SMPROGRAMS\Flex\Uninstall.lnk"
          RMDir "$SMPROGRAMS\Flex"
          
          ; Remove from PATH
          ReadRegStr $1 HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "PATH"
          Push "$INSTDIR;"
          Push $1
          Call un.RemoveFromPath
          Pop $2
          WriteRegExpandStr HKLM "SYSTEM\CurrentControlSet\Control\Session Manager\Environment" "PATH" $2
          
          ; Remove registry entries
          DeleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\Flex"
          
          ; Remove installation directory
          RMDir "$INSTDIR"
        SectionEnd
        
        ; Function to remove directory from PATH
        Function un.RemoveFromPath
          Exch $0
          Exch
          Exch $1
          Push $2
          Push $3
          Push $4
          Push $5
          Push $6
          StrCpy $5 $1 1 -1
          StrCmp $5 ";" +2
          StrCpy $1 "$1;"
          Push $1
          Push $0
          Call un.StrStr
          Pop $2
          StrCmp $2 "" unRemoveFromPath_done
          StrLen $3 $0
          StrLen $4 $2
          StrCpy $5 $1 -$4
          StrCpy $6 $2 "" $3
          StrCpy $3 $5$6
          StrCpy $5 $3 1 -1
          StrCmp $5 ";" 0 +2
          StrCpy $3 $3 -1
          StrCpy $1 $3
        unRemoveFromPath_done:
          Pop $6
          Pop $5
          Pop $4
          Pop $3
          Pop $2
          Pop $0
          Exch $1
        FunctionEnd
        
        ; Function for string search
        Function un.StrStr
          Exch $R1
          Exch
          Exch $R2
          Push $R3
          Push $R4
          Push $R5
          StrLen $R3 $R1
          StrCpy $R4 0
          loop:
            StrCpy $R5 $R2 $R3 $R4
            StrCmp $R5 $R1 done
            StrCmp $R5 "" done
            IntOp $R4 $R4 + 1
            Goto loop
          done:
          StrCpy $R1 $R2 "" $R4
          Pop $R5
          Pop $R4
          Pop $R3
          Pop $R2
          Exch $R1
        FunctionEnd
        '@
        
        # Create installer script file - no replacements needed since we're using single quotes
        Set-Content -Path "installer.nsi" -Value $installerScript -Encoding UTF8
        
        # Debug output for script issues
        Write-Host "--- Generated NSIS script ---"
        Get-Content "installer.nsi" | ForEach-Object { Write-Host $_ }
        Write-Host "----------------------------"
        
        # Skip icon creation since it's not essential for the installer
        
        # Check if NSIS is properly installed and find the executable
        $nsisPath = $null
        $possiblePaths = @(
          'C:\Program Files (x86)\NSIS\makensis.exe',
          'C:\Program Files\NSIS\makensis.exe'
        )
        
        foreach ($path in $possiblePaths) {
          if (Test-Path $path) {
            $nsisPath = $path
            Write-Host "NSIS found at: $path"
            break
          }
        }
        
        if (-not $nsisPath) {
          # Try to find it in PATH
          $nsisFromPath = Get-Command makensis.exe -ErrorAction SilentlyContinue
          if ($nsisFromPath) {
            $nsisPath = $nsisFromPath.Source
            Write-Host "NSIS found in PATH: $nsisPath"
          } else {
            Write-Error "NSIS not found! Installation may have failed."
            exit 1
          }
        }
        
        # Verify the executable file exists before building
        if (-not (Test-Path "src\dist\flex.exe")) {
          Write-Error "flex.exe not found in src\dist\ - PyInstaller build may have failed"
          exit 1
        }
        
        # Compile the NSIS script
        Write-Host "Compiling NSIS script..."
        try {
          $process = Start-Process -FilePath $nsisPath -ArgumentList "installer.nsi" -Wait -NoNewWindow -PassThru
          
          if ($process.ExitCode -eq 0) {
            Write-Host "✅ NSIS compilation successful!"
            # Verify the installer was created
            if (Test-Path "flex-installer.exe") {
              $size = (Get-Item "flex-installer.exe").Length / 1MB
              Write-Host "✅ Installer created successfully (${size:F1} MB)"
            } else {
              Write-Error "❌ Installer file not found after compilation"
              exit 1
            }
          } else {
            Write-Error "❌ NSIS compilation failed with exit code: $($process.ExitCode)"
            # Try again with verbose output for debugging
            Write-Host "Retrying with verbose output..."
            & $nsisPath /V4 installer.nsi
            exit 1
          }
        } catch {
          Write-Error "❌ Error running NSIS: $_"
          exit 1
        }
      
    # Create macOS Package
    - name: Create macOS Package
      if: matrix.os == 'macos-latest'
      run: |
        # Create package structure
        mkdir -p pkg_root/usr/local/bin
        mkdir -p pkg_root/usr/local/share/flex
        
        # Copy executable
        cp src/dist/flex-macos pkg_root/usr/local/bin/flex
        chmod +x pkg_root/usr/local/bin/flex
        
        # Create scripts
        mkdir -p scripts
        
        # Preinstall script
        cat > scripts/preinstall << EOF
        #!/bin/bash
        # Remove previous version if exists
        if [ -f /usr/local/bin/flex ]; then
          rm -f /usr/local/bin/flex
        fi
        exit 0
        EOF
        
        # Postinstall script
        cat > scripts/postinstall << EOF
        #!/bin/bash
        # Set permissions
        chmod 755 /usr/local/bin/flex
        exit 0
        EOF
        
        # Make scripts executable
        chmod +x scripts/preinstall scripts/postinstall
        
        # Use direct pkgbuild without component plist
        pkgbuild --root pkg_root \
          --identifier com.flex.interpreter \
          --version 1.0 \
          --install-location / \
          --scripts scripts \
          flex-component.pkg
        
        # Create distribution file
        cat > distribution.xml << EOF
        <?xml version="1.0" encoding="utf-8"?>
        <installer-gui-script minSpecVersion="1">
          <title>Flex Language Interpreter</title>
          <welcome file="welcome.html"/>
          <license file="license.html"/>
          <conclusion file="conclusion.html"/>
          <domains enable_localSystem="true"/>
          <options customize="allow" allow-external-scripts="no"/>
          <choices-outline>
            <line choice="default">
              <line choice="com.flex.interpreter"/>
            </line>
          </choices-outline>
          <choice id="default"/>
          <choice id="com.flex.interpreter" visible="false">
            <pkg-ref id="com.flex.interpreter"/>
          </choice>
          <pkg-ref id="com.flex.interpreter" version="1.0" onConclusion="none">flex-component.pkg</pkg-ref>
        </installer-gui-script>
        EOF
        
        # Create HTML files
        mkdir -p resources
        
        # Welcome file
        cat > resources/welcome.html << EOF
        <html>
        <body>
        <h1>Flex Language Interpreter</h1>
        <p>This package will install the Flex Language Interpreter on your Mac.</p>
        </body>
        </html>
        EOF
        
        # License file
        cat > resources/license.html << EOF
        <html>
        <body>
        <h1>License Agreement</h1>
        <p>Copyright (c) 2025 Flex Team</p>
        <p>Permission is hereby granted, free of charge, to any person obtaining a copy of this software...</p>
        </body>
        </html>
        EOF
        
        # Conclusion file
        cat > resources/conclusion.html << EOF
        <html>
        <body>
        <h1>Installation Complete</h1>
        <p>The Flex Language Interpreter has been installed in /usr/local/bin/flex</p>
        <p>You can now run it from Terminal by typing "flex"</p>
        </body>
        </html>
        EOF
        
        # Build the final package
        productbuild --distribution distribution.xml \
          --resources resources \
          --package-path . \
          flex-installer.pkg
        
    # Linux installation script
    - name: Create Linux Installer
      if: matrix.os == 'ubuntu-latest'
      run: |
        mkdir -p installer
        cp src/dist/flex-linux installer/flex
        
        # Create installation script
        cat > installer/install.sh << 'EOF'
        #!/bin/bash
        
        # Flex Language Interpreter Installer
        echo "Flex Language Interpreter Installer"
        echo "==================================="
        
        # Check if running as root
        if [ "$EUID" -ne 0 ]; then
          echo "Please run as root (use sudo)"
          exit 1
        fi
        
        # Default installation directory
        DEFAULT_INSTALL_DIR="/usr/local/bin"
        
        # Ask for installation directory
        read -p "Installation directory [$DEFAULT_INSTALL_DIR]: " INSTALL_DIR
        INSTALL_DIR=${INSTALL_DIR:-$DEFAULT_INSTALL_DIR}
        
        # Create directory if it doesn't exist
        mkdir -p "$INSTALL_DIR"
        
        # Copy executable
        cp "$(dirname "$0")/flex" "$INSTALL_DIR/flex"
        chmod +x "$INSTALL_DIR/flex"
        
        echo "Flex has been installed to $INSTALL_DIR/flex"
        echo "You can now run it by typing 'flex'"
        EOF
        
        chmod +x installer/install.sh
        
        # Create tarball
        tar -czvf flex-linux-installer.tar.gz -C installer .
        
    - name: Set Executable Permissions (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd src/dist
        chmod +x ${{ matrix.output_name }}
        ls -la ${{ matrix.output_name }}
        
    - name: Test Executable (Linux/macOS)
      if: matrix.os != 'windows-latest'
      run: |
        cd src/dist
        # Test version flag
        ./${{ matrix.output_name }} --version
        # Test help flag
        ./${{ matrix.output_name }} --help | head -10
        # Test basic functionality with a simple file
        echo 'print("Hello from CI/CD!")' > test.lx
        ./${{ matrix.output_name }} test.lx || echo "Basic test failed - this is expected if dependencies are missing"
        
    - name: Test Executable (Windows)
      if: matrix.os == 'windows-latest'
      shell: powershell
      run: |
        cd src\dist
        # Test version flag
        .\${{ matrix.output_name }}.exe --version
        # Test help flag with UTF-8 encoding support
        $env:PYTHONIOENCODING = "utf-8"
        $env:PYTHONLEGACYWINDOWSSTDIO = "utf-8"
        Write-Host "Testing help command (may have Unicode issues on Windows)..."
        try {
          $helpOutput = .\${{ matrix.output_name }}.exe --help 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Help command succeeded"
            $helpOutput | Select-Object -First 5 | Out-Host
          } else {
            Write-Host "❌ Help command failed - Exit code: $LASTEXITCODE"
            Write-Host "This indicates a serious issue with the executable"
            exit 1
          }
        } catch {
          Write-Host "❌ Help test failed due to an error"
          Write-Host "Error: $_"
          exit 1
        }
        'print("Hello from CI/CD!")' | Out-File -FilePath test.lx -Encoding ASCII
        Write-Host "Created test file with content: print(`"Hello from CI/CD!`")"
        try {
          $output = .\${{ matrix.output_name }}.exe test.lx 2>&1
          if ($LASTEXITCODE -eq 0) {
            Write-Host "✅ Flex program executed successfully!"
            Write-Host "Output: $output"
          } else {
            Write-Host "❌ Flex program execution failed - Exit code: $LASTEXITCODE"
            Write-Host "Output: $output"
            Exit $LASTEXITCODE
          }
            Write-Host "This indicates a critical failure in the Flex interpreter"
            exit 1
          }
        } catch {
          Write-Host "❌ Failed to execute Flex program"
          Write-Host "Error: $_"
          Write-Host "This indicates a critical failure in the Flex interpreter"
          exit 1
        }
        
    - name: Upload Artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ${{ matrix.asset_name }}
        path: src/dist/${{ matrix.output_name }}*
        retention-days: 7
        
    # Upload Windows installer as artifact
    - name: Upload Windows Installer Artifact
      if: matrix.os == 'windows-latest'
      uses: actions/upload-artifact@v4
      with:
        name: flex-windows-installer
        path: flex-installer.exe
        retention-days: 7
        
    # Upload macOS installer as artifact
    - name: Upload macOS Installer Artifact
      if: matrix.os == 'macos-latest'
      uses: actions/upload-artifact@v4
      with:
        name: flex-macos-installer
        path: flex-installer.pkg
        retention-days: 7
        
    # Upload Linux installer as artifact
    - name: Upload Linux Installer Artifact
      if: matrix.os == 'ubuntu-latest'
      uses: actions/upload-artifact@v4
      with:
        name: flex-linux-installer
        path: flex-linux-installer.tar.gz
        retention-days: 7
        
  release:
    name: Create Release
    needs: [build]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Download All Artifacts
        uses: actions/download-artifact@v4
      
      - name: Display structure of downloaded files
        run: ls -R
      
      - name: Set Permissions for Downloaded Artifacts
        run: |
          chmod +x ./flex-linux/flex-linux || true
          chmod +x ./flex-macos/flex-macos || true
          ls -la ./flex-linux/flex-linux ./flex-macos/flex-macos || true
      
      - name: Prepare release artifacts
        run: |
          mkdir -p release
          # Debug the file structure
          echo "Directory structure after downloading:"
          find . -type f -name "flex-*" | sort
          
          # Copy with platform-specific names for clarity
          cp ./flex-linux/flex-linux release/flex-linux || true
          cp ./flex.exe/flex.exe release/flex.exe || true
          cp ./flex-macos/flex-macos release/flex-macos || true
          
          # Copy installers
          cp ./flex-windows-installer/flex-installer.exe release/flex-windows-installer.exe || true
          cp ./flex-macos-installer/flex-installer.pkg release/flex-macos-installer.pkg || true
          cp ./flex-linux-installer/flex-linux-installer.tar.gz release/flex-linux-installer.tar.gz || true
          
          # Make sure executables have correct permissions
          chmod +x release/* || true
          echo "Release directory contents:"
          ls -la release/

      - name: Checkout repository for tag information
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          path: repo
      
      - name: Get next version number
        id: calc_version
        working-directory: repo
        run: |
          # Get the current date for version suffix
          DATE=$(date +'%Y%m%d')
          
          # Check if there are any existing tags that match semantic versioning
          if git tag -l "v*.*.*" | grep -q .; then
            # Get highest semantic version from existing tags  
            latest_version=$(git tag -l "v*.*.*" | sort -V | tail -n1)
            echo "Latest version found: $latest_version"
            # Extract major.minor.patch and increment patch
            version_numbers=$(echo $latest_version | sed 's/v//' | tr '.' ' ')
            read major minor patch <<< "$version_numbers"
            next_patch=$((patch + 1))
            next_version="$major.$minor.$next_patch"
          elif git tag -l "v[0-9]*" | grep -q .; then
            # Legacy single number versions - convert to semantic versioning
            latest_version=$(git tag -l "v[0-9]*" | sort -V | tail -n1 | sed 's/v//')
            next_version="1.0.$((latest_version + 1))"
          else
            # No existing version tags, start with semantic versioning
            next_version="1.0.0"
          fi
          echo "Next version will be: v$next_version"
          echo "next_version=$next_version" >> $GITHUB_OUTPUT

      # First create a tag without creating a release
      - name: Create Git Tag
        working-directory: repo
        run: |
          git config --local user.email "hassansonson2002@gmail.com"
          git config --local user.name "hassan220022"
          git tag -a v${{ steps.calc_version.outputs.next_version }} -m "Release v${{ steps.calc_version.outputs.next_version }}"
          git push origin v${{ steps.calc_version.outputs.next_version }}

      # Use the official GitHub Release API instead of the JavaScript approach
      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ steps.calc_version.outputs.next_version }}
          name: Release v${{ steps.calc_version.outputs.next_version }}
          body: |
            ## Flex Language Interpreter v${{ steps.calc_version.outputs.next_version }}
            
            This release contains both standalone executables and installers for all major platforms.
            
            ### Installers (Recommended)
            
            These installers will guide you through the setup process and let you choose where to install Flex:
            
            - **Windows**: Download `flex-windows-installer.exe`
            - **macOS**: Download `flex-macos-installer.pkg`
            - **Linux**: Download `flex-linux-installer.tar.gz` (extract and run `sudo ./install.sh`)
            
            ### Standalone Executables
            
            For advanced users who prefer manual installation:
            
            - **Linux**: Download `flex-linux`
            - **Windows**: Download `flex.exe`
            - **macOS**: Download `flex-macos`
            
            #### Manual Installation (Standalone Executables)
            
            ##### Linux/macOS:
            1. Download the appropriate executable for your platform
            2. Make it executable: `chmod +x flex-*`
            3. Move to a directory in your PATH: `sudo mv flex-* /usr/local/bin/flex`
            4. Run it: `flex yourfile.flex`
            
            ##### Windows:
            1. Download `flex.exe`
            2. Option 1 - Add to PATH:
               - Move `flex.exe` to a folder (e.g., `C:\Flex`)
               - Add this folder to your PATH environment variable
               - Create a batch file named `flex.bat` in the same folder with this content:
                 ```
                 @echo off
                 flex.exe %*
                 ```
               - Now you can run `flex` from any command prompt
               
            3. Option 2 - Direct use:
               - Run by typing the full path: `C:\path\to\flex.exe yourfile.flex`
          files: |
            release/flex-linux
            release/flex.exe
            release/flex-macos
            release/flex-windows-installer.exe
            release/flex-macos-installer.pkg
            release/flex-linux-installer.tar.gz
          generate_release_notes: false 

